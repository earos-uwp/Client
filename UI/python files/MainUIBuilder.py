#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.24.1
#  in conjunction with Tcl version 8.6
#	Jul 26, 2019 08:40:55 AM CDT  platform: Windows NT

import sys
import pandas as pd
import MainUI
import joblib

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import MainUIBuilder_support


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    MainUIBuilder_support.set_Tk_var()
    top = Toplevel1(root)
    MainUIBuilder_support.init(root, top)
    root.mainloop()


w = None


def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel(root)
    MainUIBuilder_support.set_Tk_var()
    top = Toplevel1(w)
    MainUIBuilder_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


class Toplevel1:
    def __init__(self, top=None):
        self.prereq_storage = {}
        self.prereq_grade_df = None
        # self.root_cbtn

        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        font10 = "-family {Courier New} -size 10 -weight normal -slant" \
                 " roman -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI} -size 9 -weight normal -slant " \
                "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("1123x728+270+89")
        top.title("Grade Prediction")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.predict_btn = tk.Button(top)
        self.predict_btn.place(relx=0.864, rely=0.797, height=24, width=48)
        self.predict_btn.configure(activebackground="#ececec")
        self.predict_btn.configure(activeforeground="#000000")
        self.predict_btn.configure(background="#d9d9d9")
        self.predict_btn.configure(disabledforeground="#a3a3a3")
        self.predict_btn.configure(foreground="#000000")
        self.predict_btn.configure(highlightbackground="#d9d9d9")
        self.predict_btn.configure(highlightcolor="black")
        self.predict_btn.configure(pady="0")
        self.predict_btn.configure(text='''Predict''')
        self.predict_btn.configure(command=self.predict_callback)

        self.menubar = tk.Menu(top, font=font9, bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menubar)

        self.grade_ety = ttk.Entry(top)
        self.grade_ety.place(relx=0.81, rely=0.096, relheight=0.029
                             , relwidth=0.112)
        self.grade_ety.configure(takefocus="")
        self.grade_ety.configure(cursor="ibeam")

        self.course_list_slb = ScrolledListBox(top)
        self.course_list_slb.place(relx=0.009, rely=0.096, relheight=0.776
                                   , relwidth=0.304)
        self.course_list_slb.configure(background="white")
        self.course_list_slb.configure(disabledforeground="#a3a3a3")
        self.course_list_slb.configure(font="TkFixedFont")
        self.course_list_slb.configure(foreground="black")
        self.course_list_slb.configure(highlightbackground="#d9d9d9")
        self.course_list_slb.configure(highlightcolor="#d9d9d9")
        self.course_list_slb.configure(selectbackground="#c4c4c4")
        self.course_list_slb.configure(selectforeground="black")
        self.course_list_slb.configure(width=10)
        MainUI.fill_course_list(self.course_list_slb)

        self.course_list_lbl = ttk.Label(top)
        self.course_list_lbl.place(relx=0.08, rely=0.027, height=19, width=62)
        self.course_list_lbl.configure(background="#d9d9d9")
        self.course_list_lbl.configure(foreground="#000000")
        self.course_list_lbl.configure(font="TkDefaultFont")
        self.course_list_lbl.configure(relief="flat")
        self.course_list_lbl.configure(text='''Course List''')

        self.prereq_lbl = ttk.Label(top)
        self.prereq_lbl.place(relx=0.383, rely=0.027, height=19, width=107)
        self.prereq_lbl.configure(background="#d9d9d9")
        self.prereq_lbl.configure(foreground="#000000")
        self.prereq_lbl.configure(font="TkDefaultFont")
        self.prereq_lbl.configure(relief="flat")
        self.prereq_lbl.configure(text='''Prerequisite Classes''')

        self.prereq_slb = ScrolledListBox(top)
        self.prereq_slb.place(relx=0.427, rely=0.137, relheight=0.474
                              , relwidth=0.277)
        self.prereq_slb.configure(background="white")
        self.prereq_slb.configure(disabledforeground="#a3a3a3")
        self.prereq_slb.configure(font="TkFixedFont")
        self.prereq_slb.configure(foreground="black")
        self.prereq_slb.configure(highlightbackground="#d9d9d9")
        self.prereq_slb.configure(highlightcolor="#d9d9d9")
        self.prereq_slb.configure(selectbackground="#c4c4c4")
        self.prereq_slb.configure(selectforeground="black")
        self.prereq_slb.configure(width=10)

        self.grade_lbl = ttk.Label(top)
        self.grade_lbl.place(relx=0.846, rely=0.041, height=19, width=35)
        self.grade_lbl.configure(background="#d9d9d9")
        self.grade_lbl.configure(foreground="#000000")
        self.grade_lbl.configure(font="TkDefaultFont")
        self.grade_lbl.configure(relief="flat")
        self.grade_lbl.configure(text='''Grade''')

        self.select_btn = tk.Button(top)
        self.select_btn.place(relx=0.365, rely=0.495, height=24, width=42)
        self.select_btn.configure(activebackground="#ececec")
        self.select_btn.configure(activeforeground="#000000")
        self.select_btn.configure(background="#d9d9d9")
        self.select_btn.configure(disabledforeground="#a3a3a3")
        self.select_btn.configure(foreground="#000000")
        self.select_btn.configure(highlightbackground="#d9d9d9")
        self.select_btn.configure(highlightcolor="black")
        self.select_btn.configure(pady="0")
        self.select_btn.configure(text='''Select''')
        self.select_btn.configure(command=self.select_callback)

        self.enter_btn = tk.Button(top)
        self.enter_btn.place(relx=0.81, rely=0.151, height=24, width=38)
        self.enter_btn.configure(activebackground="#ececec")
        self.enter_btn.configure(activeforeground="#000000")
        self.enter_btn.configure(background="#d9d9d9")
        self.enter_btn.configure(disabledforeground="#a3a3a3")
        self.enter_btn.configure(foreground="#000000")
        self.enter_btn.configure(highlightbackground="#d9d9d9")
        self.enter_btn.configure(highlightcolor="black")
        self.enter_btn.configure(pady="0")
        self.enter_btn.configure(text='''Enter''')
        self.enter_btn.configure(command=self.enter_callback)

        self.remove_btn = tk.Button(top)
        self.remove_btn.place(relx=0.873, rely=0.151, height=24, width=54)
        self.remove_btn.configure(activebackground="#ececec")
        self.remove_btn.configure(activeforeground="#000000")
        self.remove_btn.configure(background="#d9d9d9")
        self.remove_btn.configure(disabledforeground="#a3a3a3")
        self.remove_btn.configure(foreground="#000000")
        self.remove_btn.configure(highlightbackground="#d9d9d9")
        self.remove_btn.configure(highlightcolor="black")
        self.remove_btn.configure(pady="0")
        self.remove_btn.configure(text='''Remove''')

        self.root_cbtn = tk.Checkbutton(top)
        self.root_cbtn.place(relx=0.445, rely=0.096, relheight=0.034
                             , relwidth=0.047)
        self.root_cbtn.configure(activebackground="#ececec")
        self.root_cbtn.configure(activeforeground="#000000")
        self.root_cbtn.configure(background="#d9d9d9")
        self.root_cbtn.configure(disabledforeground="#a3a3a3")
        self.root_cbtn.configure(foreground="#000000")
        self.root_cbtn.configure(highlightbackground="#d9d9d9")
        self.root_cbtn.configure(highlightcolor="black")
        self.root_cbtn.configure(justify='left')
        self.root_cbtn.configure(text='''Root''')
        self.root_cbtn.configure(variable=MainUIBuilder_support.che47)
        self.root_cbtn.configure(width=53)

        self.all_cbtn = tk.Checkbutton(top)
        self.all_cbtn.place(relx=0.588, rely=0.096, relheight=0.034
                            , relwidth=0.037)
        self.all_cbtn.configure(activebackground="#ececec")
        self.all_cbtn.configure(activeforeground="#000000")
        self.all_cbtn.configure(background="#d9d9d9")
        self.all_cbtn.configure(disabledforeground="#a3a3a3")
        self.all_cbtn.configure(foreground="#000000")
        self.all_cbtn.configure(highlightbackground="#d9d9d9")
        self.all_cbtn.configure(highlightcolor="black")
        self.all_cbtn.configure(justify='left')
        self.all_cbtn.configure(text='''All''')
        self.all_cbtn.configure(variable=MainUIBuilder_support.che48)

        self.imme_cbtn = tk.Checkbutton(top)
        self.imme_cbtn.place(relx=0.65, rely=0.096, relheight=0.034
                             , relwidth=0.076)
        self.imme_cbtn.configure(activebackground="#ececec")
        self.imme_cbtn.configure(activeforeground="#000000")
        self.imme_cbtn.configure(background="#d9d9d9")
        self.imme_cbtn.configure(disabledforeground="#a3a3a3")
        self.imme_cbtn.configure(foreground="#000000")
        self.imme_cbtn.configure(highlightbackground="#d9d9d9")
        self.imme_cbtn.configure(highlightcolor="black")
        self.imme_cbtn.configure(justify='left')
        self.imme_cbtn.configure(text='''Immediate''')
        self.imme_cbtn.configure(variable=MainUIBuilder_support.che49)

        self.prereq_slb = ScrolledListBox(top)
        self.prereq_slb.place(relx=0.427, rely=0.137, relheight=0.474
                              , relwidth=0.277)
        self.prereq_slb.configure(background="white")
        self.prereq_slb.configure(disabledforeground="#a3a3a3")
        self.prereq_slb.configure(font="TkFixedFont")
        self.prereq_slb.configure(foreground="black")
        self.prereq_slb.configure(highlightbackground="#d9d9d9")
        self.prereq_slb.configure(highlightcolor="#d9d9d9")
        self.prereq_slb.configure(selectbackground="#c4c4c4")
        self.prereq_slb.configure(selectforeground="black")
        self.prereq_slb.configure(width=10)

        self.termgpa_ety = tk.Entry(top)
        self.termgpa_ety.place(relx=0.561, rely=0.701, height=20, relwidth=0.128)

        self.termgpa_ety.configure(background="white")
        self.termgpa_ety.configure(disabledforeground="#a3a3a3")
        self.termgpa_ety.configure(font=font10)
        self.termgpa_ety.configure(foreground="#000000")
        self.termgpa_ety.configure(insertbackground="black")
        self.termgpa_ety.configure(width=144)

        self.cumulativegpa_ety = tk.Entry(top)
        self.cumulativegpa_ety.place(relx=0.561, rely=0.646, height=20
                                     , relwidth=0.128)
        self.cumulativegpa_ety.configure(background="white")
        self.cumulativegpa_ety.configure(disabledforeground="#a3a3a3")
        self.cumulativegpa_ety.configure(font=font10)
        self.cumulativegpa_ety.configure(foreground="#000000")
        self.cumulativegpa_ety.configure(insertbackground="black")
        self.cumulativegpa_ety.configure(width=144)

        self.cumulativegpa_lbl = tk.Label(top)
        self.cumulativegpa_lbl.place(relx=0.427, rely=0.646, height=21, width=93)

        self.cumulativegpa_lbl.configure(background="#d9d9d9")
        self.cumulativegpa_lbl.configure(disabledforeground="#a3a3a3")
        self.cumulativegpa_lbl.configure(foreground="#000000")
        self.cumulativegpa_lbl.configure(text='''Cumulative GPA''')

        self.termgpa_lbl = tk.Label(top)
        self.termgpa_lbl.place(relx=0.432, rely=0.701, height=21, width=60)
        self.termgpa_lbl.configure(background="#d9d9d9")
        self.termgpa_lbl.configure(disabledforeground="#a3a3a3")
        self.termgpa_lbl.configure(foreground="#000000")
        self.termgpa_lbl.configure(text='''Term GPA''')

        self.struggled_lbl = tk.Label(top)
        self.struggled_lbl.place(relx=0.436, rely=0.755, height=21, width=57)
        self.struggled_lbl.configure(background="#d9d9d9")
        self.struggled_lbl.configure(disabledforeground="#a3a3a3")
        self.struggled_lbl.configure(foreground="#000000")
        self.struggled_lbl.configure(text='''Struggled''')

        self.struggled_cbb = ttk.Combobox(top)
        self.struggled_cbb.place(relx=0.561, rely=0.755, relheight=0.029
                                 , relwidth=0.127)
        self.struggled_cbb.configure(textvariable=MainUIBuilder_support.combobox)
        self.struggled_cbb.configure(takefocus="")

    def select_callback(self):
        type = 'root'
        try:
            MainUI.fill_prereq(self.prereq_slb, type, self.course_list_slb.get(self.course_list_slb.curselection()[0]))
            MainUI.tt()
        except IndexError:
            return
        return

    def enter_callback(self):
        MainUI.tt()
        try:
            print(self.prereq_slb.get(tk.ACTIVE))
            self.prereq_storage[self.prereq_slb.get(tk.ACTIVE)] = self.grade_ety.get()
            MainUI.tt()
        except IndexError:
            print(self.grade_ety.get())
            return
        return

    def predict_callback(self):
        try:
            index_list = []
            index_list.extend(range(len(self.prereq_storage)))

            prerequisites = list(self.prereq_storage.items())
            X = pd.DataFrame()
            for course in prerequisites:
                X[course[0]] = ''
                X.at[0, course[0]] = course[1]

            X['cumulative_gpa'] = ''
            X.at[0, 'cumulative_gpa'] = self.cumulativegpa_ety.get()

            X['prev_term_gpa'] = ''
            X.at[0, 'prev_term_gpa'] = self.termgpa_ety.get()

            X['struggle'] = ''
            X.at[0, 'struggle'] = self.struggled_cbb.get()

            model_type = self.which_prediction()

            model = joblib.load('..\\Data\\models\\' + 'GBT_model_' + model_type + '.eross')

            y = model.predict(X)

        except IndexError:
            return
        return

    def which_prediction(self):

        return prediction_type


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        # self.configure(yscrollcommand=_autoscroll(vsb),
        #	xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                      | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                      + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)

    return wrapped


class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


import platform


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


if __name__ == '__main__':
    vp_start_gui()



